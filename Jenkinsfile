pipeline {
  agent any

  environment {
    IMAGE_NAME   = 'demodeploy10'          // T√™n image backend
    DOCKER_USER  = 'thyhoang'              // Docker Hub username
    SERVER_USER  = 'ubuntu'                // T√™n user SSH c·ªßa EC2
    SERVER_HOST  = '3.106.239.158'         // Public IP c·ªßa EC2
  }

  stages {
    stage('Checkout Code') {
      steps {
        // Clone repo t·ª´ GitHub (public repo th√¨ kh√¥ng c·∫ßn credential)
        git branch: 'main', url: 'https://github.com/thy-2004/demodeploy10.git'
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        // ƒêƒÉng nh·∫≠p Docker Hub, build & push image
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-cred', 
          usernameVariable: 'DOCKER_USER_NAME', 
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
            echo "üîß Building Docker image..."
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER_NAME" --password-stdin

            # Build image t·ª´ Dockerfile.backend
            docker build -t docker.io/$DOCKER_USER/$IMAGE_NAME:latest -f ./Dockerfile.backend .

            echo "üì¶ Pushing image l√™n Docker Hub..."
            docker push docker.io/$DOCKER_USER/$IMAGE_NAME:latest

            docker logout
          '''
        }
      }
    }

    stage('Deploy to AWS EC2') {
      steps {
        // D√πng SSH key l∆∞u trong Jenkins credential ID 'deploy-ssh'
        sshagent(credentials: ['deploy-ssh']) {
          sh '''
            echo "üöÄ Deploying to EC2..."
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
              echo 'üì• Pull image m·ªõi nh·∫•t...'
              docker pull docker.io/$DOCKER_USER/$IMAGE_NAME:latest &&

              echo 'üßπ D·ª´ng v√† x√≥a container c≈© n·∫øu c√≥...'
              docker stop $IMAGE_NAME || true &&
              docker rm $IMAGE_NAME || true &&

              echo '‚öôÔ∏è  Ch·∫°y container MongoDB n·∫øu ch∆∞a c√≥...'
              docker ps -a | grep -q 'mongo' || docker run -d --name mongo -v mongo_data:/data/db -p 27017:27017 mongo &&

              echo 'üöÄ Kh·ªüi ch·∫°y container ·ª©ng d·ª•ng...'
              docker run -d --name $IMAGE_NAME \
                -p 80:5000 \
                --env-file /home/ubuntu/.env \
                --link mongo:mongo \
                docker.io/$DOCKER_USER/$IMAGE_NAME:latest
            "
          '''
        }
      }
    }
  }

  post {
    success {
      echo '‚úÖ Deploy th√†nh c√¥ng l√™n AWS EC2!'
    }
    failure {
      echo '‚ùå Deploy th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i log tr√™n Jenkins ho·∫∑c EC2.'
    }
  }
}
